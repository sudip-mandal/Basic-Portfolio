🧠 GENERAL PROJECT RULES – for Web Development

Use these rules across all web development projects unless specified otherwise:

---

📁 1. FILE STRUCTURE & ORGANIZATION

- Always use a clean, modular file structure:
  /index.html  
  /styles/ → style.css (and additional partials if needed)  
  /scripts/ → script.js (and separate logic if needed)  
  /assets/ → images, fonts, etc.  

- Keep related code (HTML, CSS, JS) logically grouped and modular.
- Use external stylesheets and scripts — avoid inline code unless necessary.

---

🧱 2. HTML BEST PRACTICES

- Use semantic HTML5 tags: `<section>`, `<article>`, `<nav>`, `<main>`, etc.
- Use descriptive `id` and `class` names (camelCase or kebab-case).
- Always include alt attributes for images.
- Follow proper nesting, indentation (2 spaces), and formatting.
- Add meta tags for responsiveness, SEO, and favicon.

---

🎨 3. CSS RULES

- Use consistent naming with BEM, utility classes, or scoped naming.
- Separate layout (Flexbox/Grid) from design (colors, fonts, shadows).
- Use CSS variables for colors and reusable values.
- Ensure full mobile responsiveness with media queries.
- Minimize redundancy by reusing common styles.
- Prefer modern units (rem, %, vw) over fixed pixels for layout.

---

🧠 4. JAVASCRIPT PRACTICES

- Write modular, reusable functions.
- Use meaningful variable and function names.
- Separate logic clearly using comments.
- Avoid deeply nested or overly complex code blocks.
- Add event listeners cleanly and remove them if needed.
- Handle errors gracefully and log meaningfully in the console.

---

📋 5. COMMENTS & DOCUMENTATION

- Add comments for:
  → Every HTML section  
  → Every major CSS block  
  → Every JS function or event

- Use a **color-coded comment label system** (or prefix emojis if editor supports it):
  🟦 Structure/Layout (HTML)  
  🟩 Styling (CSS)  
  🟨 Logic/Interactivity (JS)  
  🟪 Special Features (Animations, APIs, Effects)  
  🟥 To-Do / Fix / Warning

Example in HTML:
<!-- 🟦 CONTACT SECTION START -->

Example in JS:
// 🟨 Handle form submission with validation

---

🌍 6. PERFORMANCE & SEO

- Use compressed and optimized images.
- Lazy-load large images or animations if needed.
- Minify CSS/JS in production (optional for dev).
- Add basic SEO tags: title, description, og:image, og:title, og:type.
- Add a favicon and manifest for PWA if needed.

---

🧪 7. TESTING & DEBUGGING

- Always check across screen sizes: mobile, tablet, desktop.
- Validate HTML and CSS using W3C tools.
- Open console to test JavaScript for errors or warnings.
- Log helpful messages (but remove console logs in production).

---

✅ 8. ACCESSIBILITY (a11y)

- Use proper heading hierarchy (h1 → h2 → h3…).
- Add alt text, labels, and ARIA where necessary.
- Ensure color contrast is readable.
- Enable keyboard navigation for all interactive elements.

---

🧩 9. AI USAGE RULES (For Cursor)

- Explain non-obvious code with comments.
- Offer improvement suggestions when generating new sections.
- Stick to vanilla HTML/CSS/JS unless otherwise requested.
- Use only open-source libraries unless permission is given.
- Don’t over-automate — keep code readable and learnable.
